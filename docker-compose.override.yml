# SPDX-FileCopyrightText: 2023 Ross Patterson <me@rpatterson.net>
#
# SPDX-License-Identifier: MIT

# Override `$ docker compose` configuration for development or testing here in this
# repository checkout. Put everything used outside this checkout in
# `./docker-compose.yml`.
version: "3.8"

services:
  # Configuration specific to development:
  project-structure:
    image: "${DOCKER_REGISTRY_HOST:-registry.gitlab.com}/rpatterson\
      /project-structure:user-${DOCKER_VARIANT:-debian}-${DOCKER_BRANCH_TAG:-develop}"
    container_name: "project-structure-checkout"
    build:
      context: "./"
      target: "user"
      args:
        BUILDKIT_INLINE_CACHE: "1"
        VERSION: "${VERSION:-}"
      cache_from:
        - "${DOCKER_USER:?}/project-structure\
          :user-${DOCKER_VARIANT:-debian}-${DOCKER_BRANCH_TAG:-develop}"

  ## Contianers used for development and release:

  # Container for use by developers:
  project-structure-devel:
    image: "${DOCKER_REGISTRY_HOST:-registry.gitlab.com}/rpatterson\
      /project-structure:devel-${DOCKER_VARIANT:-debian}-${DOCKER_BRANCH_TAG:-develop}"
    container_name: "project-structure-devel"
    profiles:
      - "test"
    build:
      context: "./"
      target: "devel"
      args:
        BUILDKIT_INLINE_CACHE: "1"
        VERSION: "${VERSION:-}"
      cache_from:
        - "${DOCKER_USER:?}/project-structure\
          :devel-${DOCKER_VARIANT:-debian}-${DOCKER_BRANCH_TAG:-develop}"
    environment:
      # Continue parallel make inside the container:
      MAKEFLAGS: "${MAKEFLAGS:-}"
      # Match the time zone of the host through `./.env`:
      TZ: "${TZ:-Etc/UTC}"
      # Make the runtime user configurable in `./.env`:
      PUID: "${PUID:-1000}"
      PGID: "${PGID:-${PUID:-1000}}"
      # Variables from the environment to pass through into the container:
      CI: "${CI:-false}"
      # DEBUG: "true"
    volumes:
      # Reflect local changes inside the container:
      - "${CHECKOUT_DIR:-.}/bin/entrypoint.sh:/usr/local/bin/entrypoint.sh"
      - "${CHECKOUT_DIR:-.}/:/usr/local/src/project-structure/"
      # Preserve user configuration, data, and caches between containers and variants:
      - "${CHECKOUT_DIR:-.}/home/.config/:/home/project-structure/.config/"
      - "${CHECKOUT_DIR:-.}/home/.local/share/:/home/project-structure/.local/share/"
      - "${CHECKOUT_DIR:-.}/home/.cache/:/home/project-structure/.cache/"
      # Avoid any clashes between image variants and the local host at both build and
      # runtime.
      - "${CHECKOUT_DIR:-.}/var-docker/:/usr/local/src/project-structure/var/"

  # https://github.com/hadolint/hadolint#how-to-use
  hadolint:
    image: "ghcr.io/hadolint/hadolint"
    profiles:
      - "test"
    environment:
      TZ: "${TZ:-Etc/UTC}"
    volumes:
      - "${CHECKOUT_DIR:-.}/:/usr/local/src/project-structure/"
    working_dir: "/usr/local/src/project-structure/"
    command: >-
      hadolint "./Dockerfile"

  reuse:
    image: "docker.io/fsfe/reuse:latest-debian"
    profiles:
      - "lint"
    user: "${PUID:-1000}:${PGID:-${PUID:-1000}}"
    environment:
      TZ: "${TZ:-Etc/UTC}"
    volumes:
      - "${CHECKOUT_DIR:-.}/:/data/"
    command: >-
      lint

  vale:
    image: "docker.io/jdkato/vale"
    profiles:
      - "lint"
    user: "${PUID:-1000}:${PGID:-${PUID:-1000}}"
    environment:
      TZ: "${TZ:-Etc/UTC}"
    volumes:
      - "${CHECKOUT_DIR:-.}/:/usr/local/src/project-structure"
    working_dir: "/usr/local/src/project-structure"
    command: >-
      .

  pandoc:
    image: "docker.io/pandoc/core"
    profiles:
      - "release"
    user: "${PUID:-1000}:${PGID:-${PUID:-1000}}"
    volumes:
      - "${CHECKOUT_DIR:-.}/:/data/"
    entrypoint: "ash"
    # Strip reStructuredText directives unsupported in Markdown before converting, for
    # example table of contents, and converted Markdown that isn't widely supported, for
    # example tables:
    command: >-
      -xeu -c '
      grep -Ev "^ *\.\. +(contents)::.*" "./README.rst" |
      pandoc -f "rst" -t "gfm" | grep -Ev "^(\+-+\+|\|.*\|)$" >"./README.md"
      '

  docker-pushrm:
    image: "chko/docker-pushrm"
    depends_on:
      pandoc:
        condition: "service_completed_successfully"
    profiles:
      - "release"
    environment:
      TZ: "${TZ:-Etc/UTC}"
      DOCKER_USER: "${DOCKER_USER:-}"
      DOCKER_PASS: "${DOCKER_PASS:-}"
    volumes:
      - "${CHECKOUT_DIR:-.}/:/data/"
    command: >-
      --file "/data/var/README.md"
      --short "Project structure foundation or template"
      --debug "${DOCKER_USER:-}/project-structure"

  gitlab-release-cli:
    image: "registry.gitlab.com/gitlab-org/release-cli:latest"
    profiles:
      - "release"
    environment:
      CI_JOB_TOKEN: "${CI_JOB_TOKEN:-}"
    volumes:
      - "./:/usr/local/src/project-structure/"
    working_dir: "/usr/local/src/project-structure/"

  ## Containers related to CI/CD:

  # The container in which CI/CD runs:
  build-host:
    image: "\
      ${DOCKER_REGISTRY_HOST:-registry.gitlab.com}/rpatterson/project-structure\
      :build-host"
    profiles:
      - "ci"
    build:
      context: "./build-host/"
      args:
        BUILDKIT_INLINE_CACHE: "1"
        USER_SIGNINGKEY: "${USER_SIGNINGKEY:-}"
      cache_from:
        - "${DOCKER_USER:-}/project-structure:build-host"
    privileged: true
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "${CHECKOUT_DIR:-.}/:${CHECKOUT_DIR:-.}"
      - "${CHECKOUT_DIR:-.}/build-host/bin/init-job.sh:/usr/local/bin/init-job.sh"
      - "${CHECKOUT_DIR:-.}/build-host/bin/entrypoint.sh:/usr/local/bin/entrypoint.sh"
      # Share local authentication inside the container:
      - "~/.ssh/:/home/runner/.ssh/"
      - "${SSH_AUTH_SOCK:-/run/user/${PUID:-1000}/ssh/agent.socket}\
        :${SSH_AUTH_SOCK:-/run/user/${PUID:-1000}/ssh/agent.socket}"
      - "~/.gnupg/:/home/runner/.gnupg/"
      - "/run/user/${PUID:-1000}/gnupg/S.gpg-agent:/home/runner/.gnupg/S.gpg-agent"
      - "~/.docker/:/home/runner/.docker/"
    env_file: "./.env"
    environment:
      TZ: "${TZ:-Etc/UTC}"
      PUID: "${PUID:-1000}"
      PGID: "${DOCKER_GID:-${PGID:-${PUID:-1000}}}"
      SSH_AUTH_SOCK: "${SSH_AUTH_SOCK:-/run/user/${PUID:-1000}/ssh/agent.socket}"
      # DEBUG: "true"
    working_dir: "${CHECKOUT_DIR:-.}"
    command: >-
      make -j -O -e release-all

  gitlab-runner:
    profiles:
      - "ci"
